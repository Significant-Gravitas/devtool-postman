{
	"info": {
		"_postman_id": "8d04ce1c-685e-4837-aaed-3fd505623948",
		"name": "Agent Protocol - REST",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Basic User Experience",
			"item": [
				{
					"name": "Give me all the tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"Object.keys(pm.globals.toObject()).forEach((key) => {",
									"    pm.globals.unset(key);",
									"});",
									"Object.keys(pm.collectionVariables.toObject()).forEach((key) => {",
									"    pm.collectionVariables.unset(key);",
									"});",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "4e683aa5-1568-4a76-9c2b-ca73b1955139"
							}
						}
					],
					"id": "6acd6d66-5695-44d9-a29a-fd91a2fbc4f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks"
					},
					"response": [
						{
							"id": "90029390-7291-4114-b639-0b3dcfac093c",
							"name": "mock response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/agent/tasks"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 17 Aug 2023 18:03:12 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "150"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=1c95cd08c248d38f"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2527ca982b2b7c75"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "117"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1692295416"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[]"
						}
					]
				},
				{
					"name": "Create a new task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"taskId\", jsonData.task_id);",
									"",
									"pm.globals.set(\"taskInput\", JSON.parse(pm.request.body.raw).input);",
									"",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.input).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.task_id).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.artifacts).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.steps).to.exist.and.to.be.an('array');",
									"});",
									"",
									"pm.test(\"task_id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.task_id).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Artifacts is an array\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.artifacts).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Steps should be an array\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.steps).to.be.an('array');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "fea7645b-7f05-4243-aa87-0391da566054"
							}
						}
					],
					"id": "03bb2274-8c2f-4b62-a812-85442e8db060",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks"
					},
					"response": [
						{
							"id": "a4cbccfc-819c-4069-b557-c3be71408572",
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/agent/tasks"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 13 Aug 2023 23:23:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "28"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"task_id\": \"a1b259f8-3ab8-11ee-be56-0242ac121234\"\n}"
						}
					]
				},
				{
					"name": "Start the task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var artifacts = pm.response.json().artifacts;",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"}",
									"",
									"var artifacts = pm.response.json().artifacts;",
									"var existingArtifactId = pm.globals.get(\"artifactId\");",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    if (artifacts.length > 1) {",
									"        pm.test(\"The task should only create 1 artifact\", function () {",
									"            pm.expect.fail(\"More than one artifact was created.\");",
									"        });",
									"    } else {",
									"        pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"    }",
									"}",
									"",
									"",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"",
									"    pm.expect(responseData.task_id).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.step_id).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.output).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.is_last).to.exist.and.to.be.a('boolean');",
									"});",
									"",
									"pm.test(\"Verify that artifacts array is present and not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.artifacts).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Artifacts array should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that artifactId global variable is set correctly\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.artifacts).to.exist;",
									"    pm.expect(pm.globals.get(\"artifactId\")).to.eql(responseData.artifacts.length > 0 ? responseData.artifacts[0].artifact_id : null);",
									"});",
									"",
									"",
									"pm.test(\"Only one artifact is created if artifacts array is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.artifacts).to.exist.and.to.be.an('array');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c0332b9a-6e59-4814-96c1-01867f0a574d"
							}
						}
					],
					"id": "3ff65ed9-2bc0-4df3-9a4d-2785010c07ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"{{taskInput}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{taskId}}/steps"
					},
					"response": [
						{
							"id": "87a379b0-ba6a-4730-a76a-93c8a81d290e",
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/agent/tasks/{{taskId}}/steps"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"1a379290-3abc-11ee-be56-0242ac120002\",\n    \"status\": \"completed\",\n    \"output\": \"I am going to use the write_to_file method to write the word 'Washington' to a .txt file\",\n    \"artifacts\": [],\n    \"is_last\": false\n}"
						}
					]
				},
				{
					"name": "Continue the task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2183cebd-e59e-4007-8715-1c0ed22d56f9",
								"exec": [
									"var artifacts = pm.response.json().artifacts;",
									"",
									"var existingArtifactId = pm.globals.get(\"artifactId\");",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    if (artifacts.length > 1) {",
									"        pm.test(\"The task should only create 1 artifact\", function () {",
									"            pm.expect.fail(\"More than one artifact was created.\");",
									"        });",
									"    } else {",
									"        pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Task ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.task_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Step ID should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.step_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Status should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Output is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.output).to.exist.and.to.not.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8bef178d-34f4-4cb9-801d-05b06b474014",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "mock-match",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{taskId}}/steps"
					},
					"response": [
						{
							"id": "9056d4ac-0958-41b5-9a7f-6d224d1eff43",
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "mock-match",
										"value": "2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/agent/tasks/{{taskId}}/steps"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"24179290-3abc-11ee-be56-0242ac12002d\",\n    \"status\": \"completed\",\n    \"output\": \"I just wrote the file into a file called output.txt\",\n    \"artifacts\": [\n        \"1b979290-3abc-11ee-be56-0242ac120a9f\"\n    ],\n    \"is_last\": true\n}"
						}
					]
				},
				{
					"name": "Continue the task after it's done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var artifacts = pm.response.json().artifacts;",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"}",
									"",
									"var artifacts = pm.response.json().artifacts;",
									"var existingArtifactId = pm.globals.get(\"artifactId\");",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    if (artifacts.length > 1) {",
									"        pm.test(\"The task should only create 1 artifact\", function () {",
									"            pm.expect.fail(\"More than one artifact was created.\");",
									"        });",
									"    } else {",
									"        pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Task ID should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.task_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Step ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.step_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Status is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Output is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.output).to.exist.and.to.not.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "50ee4724-c82d-44ce-b313-9df01ca1e193"
							}
						}
					],
					"id": "10d458d2-8c50-4737-81b9-77fa80a2c804",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "mock-match",
								"value": "3",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{taskId}}/steps"
					},
					"response": [
						{
							"id": "65ec4780-7e54-4d27-a641-b492b3d44954",
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "mock-match",
										"value": "3",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/agent/tasks/{{taskId}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"agent",
										"tasks",
										"{{taskId}}",
										"steps"
									],
									"query": [
										{
											"key": "step",
											"value": "3",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"34179290-3abc-11ee-be56-0242ac12002d\",\n    \"status\": \"completed\",\n    \"output\": \"I am already done with my work! Is there anything else I can help you with ?\",\n    \"artifacts\": [\n    ],\n    \"is_last\": true\n}"
						}
					]
				},
				{
					"name": "Continue the task after it's done 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var artifacts = pm.response.json().artifacts;",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"}",
									"",
									"var artifacts = pm.response.json().artifacts;",
									"var existingArtifactId = pm.globals.get(\"artifactId\");",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    if (artifacts.length > 1) {",
									"        pm.test(\"The task should only create 1 artifact\", function () {",
									"            pm.expect.fail(\"More than one artifact was created.\");",
									"        });",
									"    } else {",
									"        pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Task ID should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.task_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Step ID should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.step_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Status should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Output is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.output).to.exist.and.to.not.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "6b5e755f-025f-4a49-b046-3334d44376c7"
							}
						}
					],
					"id": "955c9f12-5d1b-4207-983b-185cc47da4bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "mock-match",
								"value": "4",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{taskId}}/steps"
					},
					"response": [
						{
							"id": "e90dd4bb-93a3-4c98-b386-5ec50672017a",
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "mock-match",
										"value": "4",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/agent/tasks/{{taskId}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"agent",
										"tasks",
										"{{taskId}}",
										"steps"
									],
									"query": [
										{
											"key": "step",
											"value": "3",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"44179290-3abc-11ee-be56-0242ac12002d\",\n    \"status\": \"completed\",\n    \"output\": \"I am already done with my work! Is there anything else I can help you with ?\",\n    \"artifacts\": [\n    ],\n    \"is_last\": true\n}"
						}
					]
				},
				{
					"name": "Continue the task after it's done 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var artifacts = pm.response.json().artifacts;",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"}",
									"",
									"var artifacts = pm.response.json().artifacts;",
									"var existingArtifactId = pm.globals.get(\"artifactId\");",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    if (artifacts.length > 1) {",
									"        pm.test(\"The task should only create 1 artifact\", function () {",
									"            pm.expect.fail(\"More than one artifact was created.\");",
									"        });",
									"    } else {",
									"        pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"task_id should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.task_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Step ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.step_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Status should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Output is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.output).to.exist.and.to.not.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d237fa03-c84d-40bf-af9b-2ecb420d3825"
							}
						}
					],
					"id": "cd6bb5eb-9d63-4a05-a374-aa0bb8e0a71b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "mock-match",
								"value": "5",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{taskId}}/steps"
					},
					"response": [
						{
							"id": "9321f0b5-6017-48d2-bb93-633715010a41",
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "mock-match",
										"value": "5",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/agent/tasks/{{taskId}}/steps"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"54179290-3abc-11ee-be56-0242ac12002d\",\n    \"status\": \"completed\",\n    \"output\": \"I am already done with my work! Is there anything else I can help you with ?\",\n    \"artifacts\": [\n    ],\n    \"is_last\": true\n}"
						}
					]
				},
				{
					"name": "Continue the task after it's done 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var artifacts = pm.response.json().artifacts;",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"}",
									"",
									"var artifacts = pm.response.json().artifacts;",
									"var existingArtifactId = pm.globals.get(\"artifactId\");",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    if (artifacts.length > 1) {",
									"        pm.test(\"The task should only create 1 artifact\", function () {",
									"            pm.expect.fail(\"More than one artifact was created.\");",
									"        });",
									"    } else {",
									"        pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Task ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.task_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Step ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.step_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Status is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Output is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.output).to.exist.and.to.not.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "14368159-50cf-4ac2-bf32-e3e5380d5a1a"
							}
						}
					],
					"id": "c3cfcc6f-67be-43a7-a5e4-96911ff057bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "mock-match",
								"value": "6",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{taskId}}/steps"
					},
					"response": [
						{
							"id": "ed3258a4-2371-4622-854d-0b91460d2951",
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "mock-match",
										"value": "6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/agent/tasks/{{taskId}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"agent",
										"tasks",
										"{{taskId}}",
										"steps"
									],
									"query": [
										{
											"key": "step",
											"value": "3",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"64179290-3abc-11ee-be56-0242ac12002d\",\n    \"status\": \"completed\",\n    \"output\": \"I am already done with my work! Is there anything else I can help you with ?\",\n    \"artifacts\": [\n    ],\n    \"is_last\": true\n}"
						}
					]
				},
				{
					"name": "Continue the task after it's done 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var artifacts = pm.response.json().artifacts;",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"}",
									"",
									"var artifacts = pm.response.json().artifacts;",
									"var existingArtifactId = pm.globals.get(\"artifactId\");",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    if (artifacts.length > 1) {",
									"        pm.test(\"The task should only create 1 artifact\", function () {",
									"            pm.expect.fail(\"More than one artifact was created.\");",
									"        });",
									"    } else {",
									"        pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Task ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.task_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Step ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.step_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Status should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Output should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.output).to.exist.and.to.not.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "73b2c61b-7fb4-4629-95fb-9184d054a407"
							}
						}
					],
					"id": "2d08b3bc-2ef9-4774-8cef-acc7c14e80d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "mock-match",
								"value": "7",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{taskId}}/steps"
					},
					"response": [
						{
							"id": "04156f09-c72a-4787-bf62-f9a81d7f2481",
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "mock-match",
										"value": "7",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/agent/tasks/{{taskId}}/steps"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"74179290-3abc-11ee-be56-0242ac12002d\",\n    \"status\": \"completed\",\n    \"output\": \"I am already done with my work! Is there anything else I can help you with ?\",\n    \"artifacts\": [\n    ],\n    \"is_last\": true\n}"
						}
					]
				},
				{
					"name": "Continue the task after it's done 5 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var artifacts = pm.response.json().artifacts;",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"}",
									"",
									"var artifacts = pm.response.json().artifacts;",
									"var existingArtifactId = pm.globals.get(\"artifactId\");",
									"",
									"if (artifacts && artifacts.length > 0) {",
									"    if (artifacts.length > 1) {",
									"        pm.test(\"The task should only create 1 artifact\", function () {",
									"            pm.expect.fail(\"More than one artifact was created.\");",
									"        });",
									"    } else {",
									"        pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Task ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.task_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Step ID is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.step_id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Status should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Output should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.output).to.exist.and.to.not.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c874988c-2ba4-40c0-b1c3-38cc21039f6b"
							}
						}
					],
					"id": "aede82d7-0b0c-4b49-9b85-50620916b66c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "mock-match",
								"value": "7",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{taskId}}/steps"
					},
					"response": [
						{
							"id": "ed0ab791-bee4-49ad-94ea-96a4f74cb4f6",
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "mock-match",
										"value": "7",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/agent/tasks/{{taskId}}/steps"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"74179290-3abc-11ee-be56-0242ac12002d\",\n    \"status\": \"completed\",\n    \"output\": \"I am already done with my work! Is there anything else I can help you with ?\",\n    \"artifacts\": [\n    ],\n    \"is_last\": true\n}"
						}
					]
				},
				{
					"name": "Download Artifact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "5eea7bce-42b2-4472-a99f-4995fb78cbe6"
							}
						}
					],
					"id": "0e4fe009-3d77-4c99-9c41-2d6f6c5d7da3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "mock-match",
								"value": "11",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{taskId}}/artifacts/{{artifactId}}"
					},
					"response": [
						{
							"id": "0142826f-6d62-4dbf-93cd-44d58f59147c",
							"name": "mock response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "mock-match",
										"value": "11",
										"type": "text"
									}
								],
								"url": "{{url}}/agent/tasks/{{taskId}}/artifacts/{{artifactId}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Washington"
						}
					]
				}
			],
			"id": "14d024f2-516c-4d66-b0d9-e856b10acb06"
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "CRUD + load test (IN PROGRESS)",
					"item": [
						{
							"name": "Create a new task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"Object.keys(pm.globals.toObject()).forEach((key) => {",
											"    pm.globals.unset(key);",
											"});",
											"Object.keys(pm.collectionVariables.toObject()).forEach((key) => {",
											"    pm.collectionVariables.unset(key);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"taskId\", jsonData.task_id);",
											"pm.globals.set(\"taskInput\", JSON.parse(pm.request.body.raw).input);"
										],
										"type": "text/javascript",
										"id": "66f06529-a1e4-4848-8edb-2a7eed07ee15"
									}
								}
							],
							"id": "28045ab8-9eff-451a-8bba-c14e113eb75f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/agent/tasks"
							},
							"response": [
								{
									"id": "66721609-85fa-4660-b710-9571eb5fa792",
									"name": "mock response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{url}}/agent/tasks"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sun, 13 Aug 2023 23:23:05 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "28"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-srv-trace",
											"value": "v=1;t=daef761e243c402b"
										},
										{
											"key": "x-srv-span",
											"value": "v=1;s=2c0bd88502372360"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-RateLimit-Limit",
											"value": "120"
										},
										{
											"key": "X-RateLimit-Remaining",
											"value": "115"
										},
										{
											"key": "X-RateLimit-Reset",
											"value": "1691968334"
										},
										{
											"key": "ETag",
											"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"task_id\": \"a1b259f8-3ab8-11ee-be56-0242ac121234\"\n}"
								}
							]
						}
					],
					"id": "ff043ee7-ef92-48ff-af47-e30c730aa987"
				},
				{
					"name": "JSON SCHEMA (IN PROGRESS)",
					"item": [
						{
							"name": "Create a new task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"Object.keys(pm.globals.toObject()).forEach((key) => {",
											"    pm.globals.unset(key);",
											"});",
											"Object.keys(pm.collectionVariables.toObject()).forEach((key) => {",
											"    pm.collectionVariables.unset(key);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"taskId\", jsonData.task_id);",
											"pm.globals.set(\"taskInput\", JSON.parse(pm.request.body.raw).input);"
										],
										"type": "text/javascript",
										"id": "22fe720a-1ad6-4d71-840d-2764bebf0137"
									}
								}
							],
							"id": "4e74cb2f-2354-4645-abff-7f25eb0d00ef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/agent/tasks"
							},
							"response": [
								{
									"id": "6e749257-820c-4229-8253-29286fceb7c3",
									"name": "mock response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{url}}/agent/tasks"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sun, 13 Aug 2023 23:23:05 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "28"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-srv-trace",
											"value": "v=1;t=daef761e243c402b"
										},
										{
											"key": "x-srv-span",
											"value": "v=1;s=2c0bd88502372360"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-RateLimit-Limit",
											"value": "120"
										},
										{
											"key": "X-RateLimit-Remaining",
											"value": "115"
										},
										{
											"key": "X-RateLimit-Reset",
											"value": "1691968334"
										},
										{
											"key": "ETag",
											"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"task_id\": \"a1b259f8-3ab8-11ee-be56-0242ac121234\"\n}"
								}
							]
						}
					],
					"id": "9e9b5893-b903-4d6b-b8d8-9239023f4c71"
				}
			],
			"id": "78590868-6b08-4336-88f7-0a0dc0cdbd0d"
		}
	]
}