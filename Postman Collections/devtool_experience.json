{
	"info": {
		"_postman_id": "2250ca5c-d1b2-4175-8667-2bfda2946e36",
		"name": "dev tool experience",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "get skill tree [benchmark]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2f658e3-8e67-4dad-8a7f-d595bac72118",
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"TestReadFile_challenge_id\", jsonData.graph.nodes.TestReadFile.task_id);",
							"pm.globals.set(\"challenge_artifact_id\", jsonData.graph.nodes.TestReadFile.artifacts[0].artifact_id)",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"    var schema = {",
							"        type: \"object\",",
							"        properties: {",
							"            graph: {",
							"                type: \"object\",",
							"                properties: {",
							"                    nodes: {",
							"                        type: \"object\",",
							"                        patternProperties: {",
							"                            \".*\": {",
							"                                type: \"object\",",
							"                                properties: {",
							"                                    name: { type: \"string\" },",
							"                                    input: { type: \"string\" },",
							"                                    task_id: { type: \"string\" },",
							"                                    category: { type: \"array\" },",
							"                                    dependencies: { type: \"array\" },",
							"                                    cutoff: { type: \"number\" },",
							"                                    ground: {",
							"                                        type: \"object\",",
							"                                        properties: {",
							"                                            answer: { type: \"string\" },",
							"                                            should_contain: { type: \"array\" },",
							"                                            should_not_contain: { type: \"array\" },",
							"                                            files: { type: \"array\" },",
							"                                            eval: {",
							"                                                type: \"object\",",
							"                                                properties: {",
							"                                                    type: { type: \"string\" },",
							"                                                },",
							"                                            },",
							"                                        },",
							"                                    },",
							"                                    info: {",
							"                                        type: \"object\",",
							"                                        properties: {",
							"                                            difficulty: { type: \"string\" },",
							"                                            description: { type: \"string\" },",
							"                                            side_effects: { type: \"array\" },",
							"                                        },",
							"                                    },",
							"                                    artifacts: {",
							"                                        type: \"array\",",
							"                                        items: {",
							"                                            type: \"object\",",
							"                                            properties: {",
							"                                                artifact_id: { type: \"string\" },",
							"                                                file_name: { type: \"string\" },",
							"                                                file_path: { type: \"string\" },",
							"                                            },",
							"                                        },",
							"                                    },",
							"                                },",
							"                            },",
							"                        },",
							"                    },",
							"                    edges: {",
							"                        type: \"array\",",
							"                        items: {",
							"                            type: \"object\",",
							"                            properties: {",
							"                                source: { type: \"string\" },",
							"                                target: { type: \"string\" },",
							"                            },",
							"                        },",
							"                    },",
							"                },",
							"            },",
							"        },",
							"        required: [\"graph\"],",
							"    };",
							"",
							"    var response = pm.response.json();",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "361b0f79-6e14-4f49-9180-13029944f686",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/skill_tree"
			},
			"response": [
				{
					"id": "da4e2906-d0be-4580-a1fb-973e4c3843bb",
					"name": "mock response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/skill_tree"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 13 Aug 2023 23:23:05 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "28"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=daef761e243c402b"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=2c0bd88502372360"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "115"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1691968334"
						},
						{
							"key": "ETag",
							"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"graph\": {\n        \"nodes\": {\n            \"TestWriteFile\": {\n                \"name\": \"TestWriteFile\",\n                \"input\": \"Write the word 'Washington' to a .txt file\",\n                \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n                \"category\": [\n                    \"interface\"\n                ],\n                \"dependencies\": [],\n                \"cutoff\": 60,\n                \"ground\": {\n                    \"answer\": \"The word 'Washington', printed to a .txt file named anything\",\n                    \"should_contain\": [\n                        \"Washington\"\n                    ],\n                    \"should_not_contain\": [],\n                    \"files\": [\n                        \".txt\"\n                    ],\n                    \"eval\": {\n                        \"type\": \"file\"\n                    }\n                },\n                \"info\": {\n                    \"difficulty\": \"interface\",\n                    \"description\": \"Tests the agents ability to write to a file\",\n                    \"side_effects\": [\n                        \"\"\n                    ]\n                }\n            },\n            \"TestReadFile\": {\n                \"name\": \"TestReadFile\",\n                \"category\": [\n                    \"interface\"\n                ],\n                \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n                \"input\": \"Read the file called file_to_read.txt and write its content to a file called output.txt\",\n                \"dependencies\": [\n                    \"TestWriteFile\"\n                ],\n                \"cutoff\": 60,\n                \"ground\": {\n                    \"answer\": \"The content of output.txt should be 'Hello World!'\",\n                    \"should_contain\": [\n                        \"Hello World!\"\n                    ],\n                    \"files\": [\n                        \"output.txt\"\n                    ],\n                    \"eval\": {\n                        \"type\": \"file\"\n                    }\n                },\n                \"info\": {\n                    \"description\": \"Tests the ability for an agent to read a file.\",\n                    \"difficulty\": \"interface\",\n                    \"side_effects\": [\n                        \"\"\n                    ]\n                },\n                \"artifacts\": [\n{\n                    \"artifact_id\": \"a1b259f8-3ab8-11ee-be56-0242ac121234\",\n                    \"file_name\": \"file_to_read.txt\",\n                    \"file_path\": \"interface/write_file/artifacts_out\"\n                }\n                ]\n            }\n        },\n        \"edges\": [\n            {\n                \"source\": \"TestWriteFile\",\n                \"target\": \"TestReadFile\"\n            }\n        ]\n    }\n}"
				}
			]
		},
		{
			"name": "Create the \"TestReadFile\" task [agent]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2f658e3-8e67-4dad-8a7f-d595bac72118",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "65a7f715-f1f9-4c31-a577-a4cfc1e4bb60",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"input\": \"Read the file called file_to_read.txt and write its content to a file called output.txt.\",\n    \"additional_input\": \"challenge:fde559f8-3ab8-11ee-be56-0242ac120002\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/agent/tasks"
			},
			"response": [
				{
					"id": "ad7833e9-eb0d-46b0-8bbc-62c010af58d9",
					"name": "mock response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"test:TestReadFile\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 13 Aug 2023 23:23:05 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "28"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=daef761e243c402b"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=2c0bd88502372360"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "115"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1691968334"
						},
						{
							"key": "ETag",
							"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n  \"task_id\": \"a1b259f8-3ab8-11ee-be56-0242ac121234\"\n}"
				}
			]
		},
		{
			"name": "Step: Ask for permission to read file [agent]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72f6da2a-07b0-4ef6-a4c1-a1964af242d5",
						"exec": [
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Task ID is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.task_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Task ID should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Step ID is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.step_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Step ID should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"  ",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Output is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.output).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Output should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d22a4c1c-9766-45d7-853f-3348f4641f52",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"input\": \"Read the file called file_to_read.txt and write its content to a file called output.txt.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/agent/tasks/{{task_id}}/steps"
			},
			"response": [
				{
					"id": "f0d2f0b9-5ae6-458d-9fc7-ef4bed7e1d3d",
					"name": "mock response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{task_id}}/steps"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 14 Aug 2023 16:28:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "275"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=daef761e243c402b"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=2c0bd88502372360"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "115"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1691968334"
						},
						{
							"key": "ETag",
							"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"3a379290-3abc-11ee-be56-0242ac120002\",\n    \"status\": \"completed\",\n    \"output\": \"I am going to read the file file_to_read.txt using the read_to_file command\",\n    \"artifacts\": [],\n    \"is_last\": false\n}"
				}
			]
		},
		{
			"name": "Step: Read file + ask for permission to write file [agent]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c43bf0f7-f625-4b79-99a1-24708247fa49",
						"exec": [
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"task_id is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.task_id).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Step ID is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.step_id).to.exist.and.to.have.lengthOf.at.least(1, \"Step ID should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Status is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Output is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.output).to.exist.and.to.not.be.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3083778b-7e4b-4cde-9bdb-b2e2b36f646e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_input\": \"y\",\n    \"useless_field\": \"ignore this field, it's here to match with the mocked response-1. Test change\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/agent/tasks/{{task_id}}/steps"
			},
			"response": [
				{
					"id": "2ddfa519-8f3e-4383-9831-97f031af478b",
					"name": "mock response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_input\": \"y\",\n    \"useless_field\": \"ignore this field, it's here to match with the mocked response-1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{task_id}}/steps"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 13 Aug 2023 23:23:05 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "28"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=daef761e243c402b"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=2c0bd88502372360"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "115"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1691968334"
						},
						{
							"key": "ETag",
							"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"18279290-3abc-11ee-be56-0242ac120043\",\n    \"status\": \"completed\",\n    \"output\": \"I just read this file. It contains 'Hello World!' I will now write the content of this file into a file called output.txt.\",\n    \"artifacts\": [],\n    \"is_last\": false\n}"
				}
			]
		},
		{
			"name": "Step: Write File [agent]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Task ID should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.task_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Task ID should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Step ID is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.step_id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Output is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.output).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Output should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3d600826-bdec-4ad2-87d7-9fe699e8a50c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_input\": \"y\",\n    \"useless_field\": \"ignore this field, it's here to match with the mocked response-2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/agent/tasks/{{task_id}}/steps"
			},
			"response": [
				{
					"id": "e6aa34be-ea23-4cb4-b371-9fc69093a194",
					"name": "mock response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_input\": \"y\",\n    \"useless_field\": \"ignore this field, it's here to match with the mocked response-2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/agent/tasks/{{task_id}}/steps"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 13 Aug 2023 23:23:05 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "28"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=daef761e243c402b"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=2c0bd88502372360"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "115"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1691968334"
						},
						{
							"key": "ETag",
							"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"1d179290-3abc-11ee-be56-0242ac12002f\",\n    \"status\": \"completed\",\n    \"output\": \"I wrote the file output.txt. I am done with my task\",\n    \"artifacts\": [\n        \"d31259f8-3ab8-11ee-be56-0242ac1219f1\"\n    ],\n    \"is_last\": true\n}"
				}
			]
		},
		{
			"name": "Evaluate [TBD] [benchmark]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Task ID should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.task_id).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Step ID should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.step_id).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Status is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.status).to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Output is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.output).to.exist.and.to.not.be.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c6c6d9c9-72fd-42c3-b68b-5e51e707daf0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_input\": \"y\",\n    \"useless_field\": \"ignore this field, it's here to match with the mocked response-2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/agent/tasks/{{task_id}}/steps"
			},
			"response": []
		}
	],
	"variable": [
		{
			"id": "684d547c-7cc3-4885-ba6b-bd7699a509a1",
			"key": "TestReadFile_challenge_id",
			"value": ""
		}
	]
}